Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   1


PC     Object              F  Line    Source util.src
                           A     1    ; Z8 Encore! ANSI C Compiler Release 3.80
                           A     2    ; -nolocalcse -optsize -fastcall -const=RA
                           A     3    ; -nooptlink -noregvar -reduceopt -debug -
                           A     4    ; -alias 
                           A     5        DEFINE util_TEXT,SPACE=ROM
                           A     6        FILE    ".\util.c"
                           A     7    .debug "C"
                           A     8        SEGMENT ROM_DATA
                           A     9    
                           A    10    
                           A    11    ;**************************** _sync_ok_res
                           A    12    ;Name                         Addr/Registe
                           A    13    ;_putch                              IMPOR
                           A    14    ;_getch                              IMPOR
                           A    15    
                           A    16    
                           A    17    ; Aggregate Stack Size: 0 (words)
                           A    18    
                           A    19    
                           A    20        .FRAME _n_sync_ok_response,?_n_sync_ok
                           A    21        .FCALL _n_getch
                           A    22        .FCALL _n_putch
                           A    23        .FRAME _f_sync_ok_response,?_f_sync_ok
                           A    24        .FCALL _f_getch
                           A    25        .FCALL _f_putch
                           A    26        SEGMENT util_TEXT
                           A    27    .begrec "fmt_type",10
                           A    28    .define "flags"
                           A    29    .value 0
                           A    30    .class 8
                           A    31    .type 2
                           A    32    .endef
                           A    33    .define "size"
                           A    34    .value 1
                           A    35    .class 8
                           A    36    .type 2
                           A    37    .endef
                           A    38    .define "space"
                           A    39    .value 2
                           A    40    .class 8
                           A    41    .type 2
                           A    42    .endef
                           A    43    .define "type"
                           A    44    .value 3
                           A    45    .class 8
                           A    46    .type 2
                           A    47    .endef
                           A    48    .define "field_width"
                           A    49    .value 4
                           A    50    .class 8
                           A    51    .type 2
                           A    52    .endef
Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   2


PC     Object              F  Line    Source util.src
                           A    53    .define "precision"
                           A    54    .value 5
                           A    55    .class 8
                           A    56    .type 2
                           A    57    .endef
                           A    58    .define "print_leading_char"
                           A    59    .value 6
                           A    60    .class 8
                           A    61    .type 2
                           A    62    .endef
                           A    63    .define "dest"
                           A    64    .value 7
                           A    65    .class 8
                           A    66    .type 162
                           A    67    .endef
                           A    68    .define "print_len"
                           A    69    .value 9
                           A    70    .class 8
                           A    71    .type 12
                           A    72    .endef
                           A    73    .endrec "fmt_type"
                           A    74    .begrec "flt_fmt_data",5
                           A    75    .define "pad_whole"
                           A    76    .value 0
                           A    77    .class 8
                           A    78    .type 12
                           A    79    .endef
                           A    80    .define "pad_pre_fract"
                           A    81    .value 1
                           A    82    .class 8
                           A    83    .type 12
                           A    84    .endef
                           A    85    .define "pad_post_fract"
                           A    86    .value 2
                           A    87    .class 8
                           A    88    .type 12
                           A    89    .endef
                           A    90    .define "pad_at"
                           A    91    .value 3
                           A    92    .class 8
                           A    93    .type 162
                           A    94    .endef
                           A    95    .endrec "flt_fmt_data"
                           A    96    .begrec "fmt_control_data",2
                           A    97    .define "status"
                           A    98    .value 0
                           A    99    .class 8
                           A   100    .type 2
                           A   101    .endef
                           A   102    .define "chr"
                           A   103    .value 1
                           A   104    .class 8
Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   3


PC     Object              F  Line    Source util.src
                           A   105    .type 2
                           A   106    .endef
                           A   107    .endrec "fmt_control_data"
                           A   108    .begrec "_set_type",4
                           A   109    .define "begin"
                           A   110    .value 0
                           A   111    .class 8
                           A   112    .type 162
                           A   113    .endef
                           A   114    .define "end"
                           A   115    .value 2
                           A   116    .class 8
                           A   117    .type 162
                           A   118    .endef
                           A   119    .endrec "_set_type"
                           A   120    .begrec "near_set_type",2
                           A   121    .define "begin"
                           A   122    .value 0
                           A   123    .class 8
                           A   124    .type 130
                           A   125    .endef
                           A   126    .define "end"
                           A   127    .value 1
                           A   128    .class 8
                           A   129    .type 130
                           A   130    .endef
                           A   131    .endrec "near_set_type"
                           A   132    .begrec "far_set_type",4
                           A   133    .define "begin"
                           A   134    .value 0
                           A   135    .class 8
                           A   136    .type 162
                           A   137    .endef
                           A   138    .define "end"
                           A   139    .value 2
                           A   140    .class 8
                           A   141    .type 162
                           A   142    .endef
                           A   143    .endrec "far_set_type"
                           A   144    .begrec "rom_set_type",4
                           A   145    .define "begin"
                           A   146    .value 0
                           A   147    .class 8
                           A   148    .type 194
                           A   149    .endef
                           A   150    .define "end"
                           A   151    .value 2
                           A   152    .class 8
                           A   153    .type 194
                           A   154    .endef
                           A   155    .endrec "rom_set_type"
                           A   156    .begrec "flt_info",12
Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   4


PC     Object              F  Line    Source util.src
                           A   157    .define "flags"
                           A   158    .value 0
                           A   159    .class 8
                           A   160    .type 12
                           A   161    .endef
                           A   162    .define "exp"
                           A   163    .value 1
                           A   164    .class 8
                           A   165    .type 2
                           A   166    .endef
                           A   167    .define "digits"
                           A   168    .value 2
                           A   169    .class 8
                           A   170    .dim 10
                           A   171    .type 108
                           A   172    .endef
                           A   173    .endrec "flt_info"
                           A   174    .begrec "NONAME0",6
                           A   175    .define "baudRate"
                           A   176    .value 0
                           A   177    .class 8
                           A   178    .type 5
                           A   179    .endef
                           A   180    .define "stopBits"
                           A   181    .value 4
                           A   182    .class 8
                           A   183    .type 12
                           A   184    .endef
                           A   185    .define "parity"
                           A   186    .value 5
                           A   187    .class 8
                           A   188    .type 12
                           A   189    .endef
                           A   190    .endrec "NONAME0"
                           A   191    .begrec "NONAME1",5
                           A   192    .define "pBuffer"
                           A   193    .value 0
                           A   194    .class 8
                           A   195    .type 172
                           A   196    .endef
                           A   197    .define "next_in"
                           A   198    .value 2
                           A   199    .class 8
                           A   200    .type 12
                           A   201    .endef
                           A   202    .define "next_out"
                           A   203    .value 3
                           A   204    .class 8
                           A   205    .type 12
                           A   206    .endef
                           A   207    .define "size"
                           A   208    .value 4
Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   5


PC     Object              F  Line    Source util.src
                           A   209    .class 8
                           A   210    .type 12
                           A   211    .endef
                           A   212    .endrec "NONAME1"
                           A   213    ;    1  #include "util.h"
                           A   214    ;    2  
                           A   215    ;    3  void sync_ok_response(void)
                           A   216    ;    4  {
0000                       A   217    _sync_ok_response:
                           A   218    .define "_sync_ok_response"
                           A   219    .value _sync_ok_response
                           A   220    .class 2
                           A   221    .type 65
                           A   222    .endef
                           A   223    .begfunc "sync_ok_response",4,"_sync_ok_re
0000 D6 0000               A   224        CALL    __b_frameset00
                           A   225    ;    5      if (getch() == ' ') { // Check
                           A   226    .line 5
0003 D6 0000               A   227        CALL    _getch
0006 A6E120                A   228        CP  R1,#32
0009 1FA6E000              A   229        CPC R0,#-0
000D EB 0A                 A   230        JR  NE,_1_L_1
                           A   231    ;    6          putch(STK_INSYNC);
                           A   232    .line 6
000F 8C14                  A   233        LD  R8,#20
0011 D6 0000               A   234        CALL    _putch
                           A   235    ;    7          putch(STK_OK);
                           A   236    .line 7
0014 8C10                  A   237        LD  R8,#16
0016 D6 0000               A   238        CALL    _putch
                           A   239    ;    8      }
                           A   240    ;    9  }
0019                       A   241    _1_L_1:
                           A   242    .line 9
0019 D6 0000               A   243        CALL    __b_framereset
001C AF                    A   244        RET 
                           A   245    .endfunc "sync_ok_response",9,"_sync_ok_re
                           A   246        SEGMENT ROM_DATA
                           A   247    
                           A   248    
                           A   249    ;**************************** _byte_respon
                           A   250    ;Name                         Addr/Registe
                           A   251    ;_putch                              IMPOR
                           A   252    ;_getch                              IMPOR
                           A   253    ;val                                 RR14-
                           A   254    
                           A   255    
                           A   256    ; Aggregate Stack Size: -1 (words)
                           A   257    
                           A   258    
                           A   259        .FRAME _n_byte_response,?_n_byte_respo
                           A   260        .FCALL _n_getch
Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   6


PC     Object              F  Line    Source util.src
                           A   261        .FCALL _n_putch
                           A   262        .FRAME _f_byte_response,?_f_byte_respo
                           A   263        .FCALL _f_getch
                           A   264        .FCALL _f_putch
                           A   265        SEGMENT util_TEXT
                           A   266    ;   10  
                           A   267    ;   11  void byte_response(UINT8 val)
                           A   268    ;   12  {
001D                       A   269    _byte_response:
                           A   270    .define "_byte_response"
                           A   271    .value _byte_response
                           A   272    .class 2
                           A   273    .type 65
                           A   274    .endef
                           A   275    .begfunc "byte_response",12,"_byte_respons
001D 5C01                  A   276        LD  R5,#1
001F D6 0000               A   277        CALL    __b_frameset0
                           A   278    .line 12
0022 89E8FF                A   279        LDX -1(RR14),R8
                           A   280    .define "val"
                           A   281    .class 9
                           A   282    .value -1
                           A   283    .type 12
                           A   284    .endef
                           A   285    ;   13      if (getch() == ' ') { // Check
                           A   286    .line 13
0025 D6 0000               A   287        CALL    _getch
0028 A6E120                A   288        CP  R1,#32
002B 1FA6E000              A   289        CPC R0,#-0
002F EB 10                 A   290        JR  NE,_2_L_3
                           A   291    ;   14          putch(STK_INSYNC);
                           A   292    .line 14
0031 8C14                  A   293        LD  R8,#20
0033 D6 0000               A   294        CALL    _putch
                           A   295    ;   15          putch(val);
                           A   296    .line 15
0036 888EFF                A   297        LDX R8,-1(RR14)
0039 D6 0000               A   298        CALL    _putch
                           A   299    ;   16          putch(STK_OK);
                           A   300    .line 16
003C 8C10                  A   301        LD  R8,#16
003E D6 0000               A   302        CALL    _putch
                           A   303    ;   17      } /*else {
                           A   304    ;   18          if (++error_count == MAX_E
                           A   305    ;   19              app_start();
                           A   306    ;   20      }*/
                           A   307    ;   21  }
0041                       A   308    _2_L_3:
                           A   309    .line 21
0041 D6 0000               A   310        CALL    __b_framereset
0044 AF                    A   311        RET 
                           A   312    .endfunc "byte_response",21,"_byte_respons
Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   7


PC     Object              F  Line    Source util.src
                           A   313        SEGMENT ROM_DATA
                           A   314    
                           A   315    
                           A   316    ;**************************** _string_resp
                           A   317    ;Name                         Addr/Registe
                           A   318    ;_f_puts                             IMPOR
                           A   319    ;_putch                              IMPOR
                           A   320    ;_getch                              IMPOR
                           A   321    ;val                                 RR14-
                           A   322    
                           A   323    
                           A   324    ; Aggregate Stack Size: -2 (words)
                           A   325    
                           A   326    
                           A   327        .FRAME _n_string_response,?_n_string_r
                           A   328        .FCALL _n_getch
                           A   329        .FCALL _n_putch
                           A   330        .FCALL _n_f_puts
                           A   331        .FRAME _f_string_response,?_f_string_r
                           A   332        .FCALL _f_getch
                           A   333        .FCALL _f_putch
                           A   334        .FCALL _f_f_puts
                           A   335        SEGMENT util_TEXT
                           A   336    ;   22  void string_response(__CONST__ cha
                           A   337    ;   23  {
0045                       A   338    _string_response:
                           A   339    .define "_string_response"
                           A   340    .value _string_response
                           A   341    .class 2
                           A   342    .type 65
                           A   343    .endef
                           A   344    .begfunc "string_response",23,"_string_res
0045 5C02                  A   345        LD  R5,#2
0047 D6 0000               A   346        CALL    __b_frameset0
                           A   347    .line 23
004A 89E8FE                A   348        LDX -2(RR14),R8
004D 89E9FF                A   349        LDX -1(RR14),R9
                           A   350    .define "val"
                           A   351    .class 9
                           A   352    .value -2
                           A   353    .type 162
                           A   354    .endef
                           A   355    ;   24      if (getch() == ' ') { // Check
                           A   356    .line 24
0050 D6 0000               A   357        CALL    _getch
0053 A6E120                A   358        CP  R1,#32
0056 1FA6E000              A   359        CPC R0,#-0
005A EB 13                 A   360        JR  NE,_3_L_5
                           A   361    ;   25          putch(STK_INSYNC);
                           A   362    .line 25
005C 8C14                  A   363        LD  R8,#20
005E D6 0000               A   364        CALL    _putch
Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   8


PC     Object              F  Line    Source util.src
                           A   365    ;   26          puts(val);
                           A   366    .line 26
0061 888EFE                A   367        LDX R8,-2(RR14)
0064 889EFF                A   368        LDX R9,-1(RR14)
0067 D6 0000               A   369        CALL    _f_puts
                           A   370    ;   27          putch(STK_OK);
                           A   371    .line 27
006A 8C10                  A   372        LD  R8,#16
006C D6 0000               A   373        CALL    _putch
                           A   374    ;   28      } /*else {
                           A   375    ;   29          if (++error_count == MAX_E
                           A   376    ;   30              app_start();
                           A   377    ;   31      }*/
                           A   378    ;   32  }
006F                       A   379    _3_L_5:
                           A   380    .line 32
006F D6 0000               A   381        CALL    __b_framereset
0072 AF                    A   382        RET 
                           A   383    .endfunc "string_response",32,"_string_res
                           A   384        SEGMENT ROM_DATA
                           A   385    
                           A   386    
                           A   387    ;**************************** _getNch ****
                           A   388    ;Name                         Addr/Registe
                           A   389    ;_putch                              IMPOR
                           A   390    ;_getch                              IMPOR
                           A   391    ;count                               RR14-
                           A   392    
                           A   393    
                           A   394    ; Aggregate Stack Size: -1 (words)
                           A   395    
                           A   396    
                           A   397        .FRAME _n_getNch,?_n_getNch,RDATA
                           A   398        .FCALL _n_getch
                           A   399        .FCALL _n_putch
                           A   400        .FRAME _f_getNch,?_f_getNch,EDATA
                           A   401        .FCALL _f_getch
                           A   402        .FCALL _f_putch
                           A   403        SEGMENT util_TEXT
                           A   404    ;   33  
                           A   405    ;   34  void getNch(UINT8 count) {
0073                       A   406    _getNch:
                           A   407    .define "_getNch"
                           A   408    .value _getNch
                           A   409    .class 2
                           A   410    .type 65
                           A   411    .endef
                           A   412    .begfunc "getNch",34,"_getNch"
0073 5C01                  A   413        LD  R5,#1
0075 D6 0000               A   414        CALL    __b_frameset0
                           A   415    .line 34
0078 89E8FF                A   416        LDX -1(RR14),R8
Zilog eZ8 Encore! Macro Assembler Version 2.53 (20121701) 27-May-25     03:40:56     page:   9


PC     Object              F  Line    Source util.src
                           A   417    .define "count"
                           A   418    .class 9
                           A   419    .value -1
                           A   420    .type 12
                           A   421    .endef
                           A   422    ;   35    do getch(); while (--count);
007B                       A   423    _4_L_6:
                           A   424    .line 35
007B D6 0000               A   425        CALL    _getch
007E 880EFF                A   426        LDX R0,-1(RR14)
0081 30E0                  A   427        DEC R0
0083 89E0FF                A   428        LDX -1(RR14),R0
0086 4200                  A   429        OR  R0,R0
0088 EB F1                 A   430        JR  NE,_4_L_6
                           A   431    ;   36    putch(STK_INSYNC);
                           A   432    .line 36
008A 8C14                  A   433        LD  R8,#20
008C D6 0000               A   434        CALL    _putch
                           A   435    ;   37  }
                           A   436    .line 37
008F D6 0000               A   437        CALL    __b_framereset
0092 AF                    A   438        RET 
                           A   439    .endfunc "getNch",37,"_getNch"
                           A   440        XREF _getch:ROM
                           A   441        XREF _f_puts:ROM
                           A   442        XREF _putch:ROM
                           A   443        XREF __b_framereset:ROM
                           A   444        XREF __b_frameset0:ROM
                           A   445        XREF __b_frameset00:ROM
                           A   446        XDEF _getNch
                           A   447        XDEF _string_response
                           A   448        XDEF _byte_response
                           A   449        XDEF _sync_ok_response
                           A   450        END


Errors: 0
Warnings: 0
Lines Assembled: 451
