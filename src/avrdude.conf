# $Id$ -*- text -*-
#
# AVRDUDE Configuration File
#
# This file contains configuration data used by AVRDUDE which describes
# the programming hardware pinouts and also provides part definitions.
# AVRDUDE's "-C" command line option specifies the location of the
# configuration file.  The "-c" option names the programmer configuration
# which must match one of the entry's "id" parameter.  The "-p" option
# identifies which part AVRDUDE is going to be programming and must match
# one of the parts' "id" parameter.
#
# DO NOT MODIFY THIS FILE.  Modifications will be overwritten the next
# time a "make install" is run.  For user-specific additions, use the
# "-C +filename" commandline option.
#
# Possible entry formats are:
#
#   programmer
#       parent <id>                                 # optional parent
#       id       = <id1> [, <id2> [, <id3>] ...] ;  # <idN> are quoted strings
#       desc     = <description> ;                  # quoted string
#       type     = <type>;                          # programmer type, quoted string
#                          # supported programmer types can be listed by "-c ?type"
#       connection_type = parallel | serial | usb
#       baudrate = <num> ;                          # baudrate for avr910-programmer
#       vcc      = <num1> [, <num2> ... ] ;         # pin number(s)
#       buff     = <num1> [, <num2> ... ] ;         # pin number(s)
#       reset    = <num> ;                          # pin number
#       sck      = <num> ;                          # pin number
#       mosi     = <num> ;                          # pin number
#       miso     = <num> ;                          # pin number
#       errled   = <num> ;                          # pin number
#       rdyled   = <num> ;                          # pin number
#       pgmled   = <num> ;                          # pin number
#       vfyled   = <num> ;                          # pin number
#       usbvid   = <hexnum>;                        # USB VID (Vendor ID)
#       usbpid   = <hexnum> [, <hexnum> ...]        # USB PID (Product ID) (1)
#       usbdev   = <interface>;                     # USB interface or other device info 
#       usbvendor = <vendorname>;                   # USB Vendor Name
#       usbproduct = <productname>;                 # USB Product Name
#       usbsn    = <serialno>;                      # USB Serial Number
#
#        To invert a bit, use = ~ <num>, the spaces are important.
#        For a pin list all pins must be inverted.
#        A single pin can be specified as usual = ~ <num>, for lists
#        specify it as follows = ~ ( <num> [, <num2> ... ] ) .
#
#        (1) Not all programmer types can process a list of PIDs.
#     ;
#
#   part
#       id               = <id> ;                 # quoted string
#       desc             = <description> ;        # quoted string
#       has_jtag         = <yes/no> ;             # part has JTAG i/f
#       has_debugwire    = <yes/no> ;             # part has debugWire i/f
#       has_pdi          = <yes/no> ;             # part has PDI i/f
#       has_updi         = <yes/no> ;             # part has UPDI i/f
#       has_tpi          = <yes/no> ;             # part has TPI i/f
#       devicecode       = <num> ;            # deprecated, use stk500_devcode
#       stk500_devcode   = <num> ;                # numeric
#       avr910_devcode   = <num> ;                # numeric
#       signature        = <num> <num> <num> ;    # signature bytes
#       usbpid           = <num> ;                # DFU USB PID
#       chip_erase_delay = <num> ;                # micro-seconds
#       reset            = dedicated | io;
#       retry_pulse      = reset | sck;
#       pgm_enable       = <instruction format> ;
#       chip_erase       = <instruction format> ;
#       chip_erase_delay = <num> ;                # chip erase delay (us)
#       # STK500 parameters (parallel programming IO lines)
#       pagel            = <num> ;                # pin name in hex, i.e., 0xD7
#       bs2              = <num> ;                # pin name in hex, i.e., 0xA0
#       serial           = <yes/no> ;             # can use serial downloading
#       parallel         = <yes/no/pseudo>;       # can use par. programming
#       # STK500v2 parameters, to be taken from Atmel's XML files
#       timeout          = <num> ;
#       stabdelay        = <num> ;
#       cmdexedelay      = <num> ;
#       synchloops       = <num> ;
#       bytedelay        = <num> ;
#       pollvalue        = <num> ;
#       pollindex        = <num> ;
#       predelay         = <num> ;
#       postdelay        = <num> ;
#       pollmethod       = <num> ;
#       mode             = <num> ;
#       delay            = <num> ;
#       blocksize        = <num> ;
#       readsize         = <num> ;
#       hvspcmdexedelay  = <num> ;
#       # STK500v2 HV programming parameters, from XML
#       pp_controlstack  = <num>, <num>, ...;   # PP only
#       hvsp_controlstack = <num>, <num>, ...;  # HVSP only
#       hventerstabdelay = <num>;
#       progmodedelay    = <num>;               # PP only
#       latchcycles      = <num>;
#       togglevtg        = <num>;
#       poweroffdelay    = <num>;
#       resetdelayms     = <num>;
#       resetdelayus     = <num>;
#       hvleavestabdelay = <num>;
#       resetdelay       = <num>;
#       synchcycles      = <num>;               # HVSP only
#       chiperasepulsewidth = <num>;            # PP only
#       chiperasepolltimeout = <num>;
#       chiperasetime    = <num>;               # HVSP only
#       programfusepulsewidth = <num>;          # PP only
#       programfusepolltimeout = <num>;
#       programlockpulsewidth = <num>;          # PP only
#       programlockpolltimeout = <num>;
#       # JTAG ICE mkII parameters, also from XML files
#       allowfullpagebitstream = <yes/no> ;
#       enablepageprogramming = <yes/no> ;
#       idr              = <num> ;                # IO addr of IDR (OCD) reg.
#       rampz            = <num> ;                # IO addr of RAMPZ reg.
#       spmcr            = <num> ;                # mem addr of SPMC[S]R reg.
#       eecr             = <num> ;                # mem addr of EECR reg.
#                                                 # (only when != 0x3c)
#       is_at90s1200     = <yes/no> ;             # AT90S1200 part
#       is_avr32         = <yes/no> ;             # AVR32 part
#
#       memory <memtype>
#           paged           = <yes/no> ;          # yes / no
#           size            = <num> ;             # bytes
#           page_size       = <num> ;             # bytes
#           num_pages       = <num> ;             # numeric
#           min_write_delay = <num> ;             # micro-seconds
#           max_write_delay = <num> ;             # micro-seconds
#           readback_p1     = <num> ;             # byte value
#           readback_p2     = <num> ;             # byte value
#           pwroff_after_write = <yes/no> ;       # yes / no
#           read            = <instruction format> ;
#           write           = <instruction format> ;
#           read_lo         = <instruction format> ;
#           read_hi         = <instruction format> ;
#           write_lo        = <instruction format> ;
#           write_hi        = <instruction format> ;
#           loadpage_lo     = <instruction format> ;
#           loadpage_hi     = <instruction format> ;
#           writepage       = <instruction format> ;
#         ;
#     ;
#
# If any of the above parameters are not specified, the default value
# of 0 is used for numerics or the empty string ("") for string
# values.  If a required parameter is left empty, AVRDUDE will
# complain.
#
# Parts can also inherit parameters from previously defined parts
# using the following syntax. In this case specified integer and 
# string values override parameter values from the parent part. New 
# memory definitions are added to the definitions inherited from the 
# parent.
#
#   part parent <id>                              # quoted string
#       id               = <id> ;                 # quoted string
#       <any set of other parameters from the list above>
#     ;
#
# NOTES:
#   * 'devicecode' is the device code used by the STK500 (see codes 
#       listed below)
#   * Not all memory types will implement all instructions.
#   * AVR Fuse bits and Lock bits are implemented as a type of memory.
#   * Example memory types are:
#       "flash", "eeprom", "fuse", "lfuse" (low fuse), "hfuse" (high
#       fuse), "signature", "calibration", "lock"
#   * The memory type specified on the avrdude command line must match
#     one of the memory types defined for the specified chip.
#   * The pwroff_after_write flag causes avrdude to attempt to
#     power the device off and back on after an unsuccessful write to
#     the affected memory area if VCC programmer pins are defined.  If
#     VCC pins are not defined for the programmer, a message
#     indicating that the device needs a power-cycle is printed out.
#     This flag was added to work around a problem with the
#     at90s4433/2333's; see the at90s4433 errata at:
#
#         http://www.atmel.com/dyn/resources/prod_documents/doc1280.pdf
#
# INSTRUCTION FORMATS
#
#    Instruction formats are specified as a comma seperated list of
#    string values containing information (bit specifiers) about each
#    of the 32 bits of the instruction.  Bit specifiers may be one of
#    the following formats:
#
#       '1'  = the bit is always set on input as well as output
#
#       '0'  = the bit is always clear on input as well as output
#
#       'x'  = the bit is ignored on input and output
#
#       'a'  = the bit is an address bit, the bit-number matches this bit
#              specifier's position within the current instruction byte
#
#       'aN' = the bit is the Nth address bit, bit-number = N, i.e., a12
#              is address bit 12 on input, a0 is address bit 0.
#
#       'i'  = the bit is an input data bit
#
#       'o'  = the bit is an output data bit
#
#    Each instruction must be composed of 32 bit specifiers.  The
#    instruction specification closely follows the instruction data
#    provided in Atmel's data sheets for their parts.
#
# See below for some examples.
#
#
# The following are STK500 part device codes to use for the
# "devicecode" field of the part.  These came from Atmel's software
# section avr061.zip which accompanies the application note
# AVR061 available from:
#
#      http://www.atmel.com/dyn/resources/prod_documents/doc2525.pdf
#

#define ATTINY10    0x10  /* the _old_ one that never existed! */
#define ATTINY11    0x11
#define ATTINY12    0x12
#define ATTINY15    0x13
#define ATTINY13    0x14

#define ATTINY22    0x20
#define ATTINY26    0x21
#define ATTINY28    0x22
#define ATTINY2313  0x23

#define AT90S1200   0x33

#define AT90S2313   0x40
#define AT90S2323   0x41
#define AT90S2333   0x42
#define AT90S2343   0x43

#define AT90S4414   0x50
#define AT90S4433   0x51
#define AT90S4434   0x52
#define ATMEGA48    0x59

#define AT90S8515   0x60
#define AT90S8535   0x61
#define AT90C8534   0x62
#define ATMEGA8515  0x63
#define ATMEGA8535  0x64

#define ATMEGA8     0x70
#define ATMEGA88    0x73
#define ATMEGA168   0x86

#define ATMEGA161   0x80
#define ATMEGA163   0x81
#define ATMEGA16    0x82
#define ATMEGA162   0x83
#define ATMEGA169   0x84

#define ATMEGA323   0x90
#define ATMEGA32    0x91

#define ATMEGA64    0xA0

#define ATMEGA103   0xB1
#define ATMEGA128   0xB2
#define AT90CAN128  0xB3
#define AT90CAN64   0xB3
#define AT90CAN32   0xB3

#define AT86RF401   0xD0

#define AT89START   0xE0
#define AT89S51	    0xE0
#define AT89S52	    0xE1

# The following table lists the devices in the original AVR910
# appnote:
# |Device |Signature | Code |
# +-------+----------+------+
# |tiny12 | 1E 90 05 | 0x55 |
# |tiny15 | 1E 90 06 | 0x56 |
# |       |          |      |
# | S1200 | 1E 90 01 | 0x13 |
# |       |          |      |
# | S2313 | 1E 91 01 | 0x20 |
# | S2323 | 1E 91 02 | 0x48 |
# | S2333 | 1E 91 05 | 0x34 |
# | S2343 | 1E 91 03 | 0x4C |
# |       |          |      |
# | S4414 | 1E 92 01 | 0x28 |
# | S4433 | 1E 92 03 | 0x30 |
# | S4434 | 1E 92 02 | 0x6C |
# |       |          |      |
# | S8515 | 1E 93 01 | 0x38 |
# | S8535 | 1E 93 03 | 0x68 |
# |       |          |      |
# |mega32 | 1E 95 01 | 0x72 |
# |mega83 | 1E 93 05 | 0x65 |
# |mega103| 1E 97 01 | 0x41 |
# |mega161| 1E 94 01 | 0x60 |
# |mega163| 1E 94 02 | 0x64 |

# Appnote AVR109 also has a table of AVR910 device codes, which
# lists:
# dev         avr910   signature
# ATmega8     0x77     0x1E 0x93 0x07
# ATmega8515  0x3B     0x1E 0x93 0x06
# ATmega8535  0x6A     0x1E 0x93 0x08
# ATmega16    0x75     0x1E 0x94 0x03
# ATmega162   0x63     0x1E 0x94 0x04
# ATmega163   0x66     0x1E 0x94 0x02
# ATmega169   0x79     0x1E 0x94 0x05
# ATmega32    0x7F     0x1E 0x95 0x02
# ATmega323   0x73     0x1E 0x95 0x01
# ATmega64    0x46     0x1E 0x96 0x02
# ATmega128   0x44     0x1E 0x97 0x02
#
# These codes refer to "BOOT" device codes which are apparently
# different than standard device codes, for whatever reasons
# (often one above the standard code).

# There are several extended versions of AVR910 implementations around
# in the Internet.  These add the following codes (only devices that
# actually exist are listed):

# ATmega8515	0x3A
# ATmega128	0x43
# ATmega64	0x45
# ATtiny26	0x5E
# ATmega8535	0x69
# ATmega32	0x72
# ATmega16	0x74
# ATmega8	0x76
# ATmega169	0x78

#
# Overall avrdude defaults; suitable for ~/.avrduderc
#
default_parallel   = "lpt1";
default_serial     = "com1";
# default_bitclock = 2.5;

# Turn off safemode by default
#default_safemode  = no;


#
# PROGRAMMER DEFINITIONS
#

# http://wiring.org.co/
# Basically STK500v2 protocol, with some glue to trigger the
# bootloader.
programmer
  id    = "wiring";
  desc  = "Wiring";
  type  = "wiring";
  connection_type = serial;
;

programmer
  id    = "arduino";
  desc  = "Arduino";
  type  = "arduino";
  connection_type = serial;
;

part
  id = "z8f081a_no_nvds" ;
  desc = "Zilog Z8 Encore! XP F081A Series MCU (8KB Flash, no NVDS)" ;

  # Debug Interface (Zilog uses On-Chip Debugger (OCD), not AVR-specific interfaces)
  # The Z8 Encore! XP F082A Series features an On-Chip Debugger (OCD) accessed via a single-pin interface [9-11].
  # AVRDUDE's debug interface flags (has_jtag, has_debugwire, etc.) are specific to Atmel AVRs [4].
  has_jtag = no ;
  has_debugwire = yes ;
  has_pdi = no ;
  has_updi = no ;
  has_tpi = no ;
  timeout	= 2000; # Timeout for communication with the device, in milliseconds [4].
  # The timeout is set to 2000 ms (2 seconds) to allow for the Zilog OCD's slower response times compared to AVR's JTAG or UPDI interfaces [12-14].
  stabdelay	= 100;
  cmdexedelay	= 2500; # Command execution delay, in milliseconds [4].
  synchloops	= 32;
  bytedelay	= 0;
  #pollindex	= 3;
  #pollvalue	= 0x53;
  #predelay	= 1;
  #postdelay	= 1;
  #pollmethod	= 1;

  # Device Signature (AVR-specific, not applicable to Zilog)
  # Zilog devices use different internal identifiers and programming protocols.
  # devicecode = N/A ;          # Deprecated, use stk500_devcode [4]
  stk500_devcode = 0x73 ;
  # avr910_devcode = N/A ;
  signature = 0x73 0xFF 0x96 ; # AVR signature bytes are 3 bytes [4, 7].

  # Chip Erase Delay (Corresponds to Flash Mass Erase Time)
  # The Flash memory can be Mass Erased, which sets all bytes to FFH [18].
  chip_erase_delay = 200000 ; # 200 ms (200,000 microseconds) for Flash Mass Erase [19]

  # Reset Type
  # The Z8 Encore! XP F082A Series can be reset using the RESET pin, Power-On Reset (POR), Watchdog Timer (WDT) time-out, Stop Mode exit, or Voltage Brown-Out (VBO) warning signal [16]. The RESET pin is bidirectional [16, 20].
  reset = dedicated ;

  # Programming Enable Command (AVR-specific instruction format)
  # This would involve Zilog's specific Flash Controller unlock sequence (e.g., writing 73H then 8CH to FCTL) [21].
  # pgm_enable = "<AVR-specific instruction format string>" ; # Not directly translatable

  # Chip Erase Command (AVR-specific instruction format)
  # In Zilog, Mass Erase is initiated by writing 63H to FCTL via the On-Chip Debugger [18, 21].
  # chip_erase = "<AVR-specific instruction format string>" ; # Not directly translatable

  # Memory Definitions

  memory "flash"
    paged = yes ; # Flash memory is arranged in 512-byte pages [22].
    size = 8192 ;   # 8 KB Flash memory for Z8F081A [15].
    page_size = 512 ; # 512 bytes per page [22].
    num_pages = 16 ; # 8 KB / 512 bytes per page = 16 pages [15, 22].
    min_write_delay = 20 ; # microseconds (Flash Byte Program Time minimum) [23].
    max_write_delay = 40 ; # microseconds (Flash Byte Program Time maximum) [23].
    # read = "<AVR-specific instruction format string>" ; # Zilog uses LDC/LDCI for Program Memory reads [24-26].
    # write = "<AVR-specific instruction format string>" ; # Zilog uses LDC/LDCI for Program Memory writes [27, 28].
  ;

  memory "ram" # This would be the Register File in Zilog terminology
    # The Z8 Encore! XP F081A has 1 KB of RAM [15].
    # The Register File address space is 4 KB maximum, with the upper 256 bytes reserved for control registers [29-31].
    size = 1024 ; # 1 KB RAM [15].
    # read = "<AVR-specific instruction format string>" ; # Zilog reads registers [28, 32].
    # write = "<AVR-specific instruction format string>" ; # Zilog writes registers [32, 33].
  ;

  memory "eeprom"
    # The Z8F081A devices (8KB Flash) **do not include** the Non-Volatile Data Storage (NVDS) feature [15-17].
    # Other Z8 Encore! XP F082A Series devices (like Z8F042A, Z8F022A, Z8F012A) do include NVDS, ranging from 16 B to 128 B [15].
    # Therefore, for Z8F081A, this memory type would be effectively absent or 0 size.
    size = 0 ; # No NVDS on 8KB Flash parts like Z8F081A [15, 17].
  ;

  memory "fuse" # Conceptual mapping for Zilog's Flash Option Bits at Program Memory Address 0000H
    # AVRDUDE implements fuse bits as a type of memory [34].
    size = 1 ; # One byte for address 0000H [35, 36].
    # The bits here control features like:
    # - Bit 7 (WDT_RES): Watchdog Timer Reset Enable (0=interrupt, 1=system reset) [37]. Default is 1 for unprogrammed Flash [37].
    # - Bit 6 (WDT_AO): Watchdog Timer Always On (0=auto-enabled, 1=enabled by WDT instruction) [37]. Default is 1 for unprogrammed Flash [37].
    # - Bit 2 (FRP): Flash Read Protect (0=inaccessible, 1=accessible) [38]. Default is 1 [38].
    # - Bit 0 (FWP): Flash Write Protect (0=disabled, 1=enabled) [38]. Default is 1 [38].
  ;

  memory "hfuse" # Conceptual mapping for Zilog's Flash Option Bits at Program Memory Address 0001H
    size = 1 ; # One byte for address 0001H [35, 39].
    # The bits here control features like:
    # - Bit 4 (XTLDIS): State of the Crystal Oscillator at Reset (0=enabled, 1=disabled) [40].
  ;

  memory "lock" # Conceptual mapping for Flash write/read protection in Zilog
    # Flash protection is handled by Flash Option Bits (FRP, FWP) [38] and a Flash Sector Protect Register (FPROT) [41, 42].
    # Unlike AVR, these are not directly presented as "lock bits" but integrated into Flash control.
    size = 1 ; # Placeholder, could map to FWP/FRP byte [38].
  ;
;